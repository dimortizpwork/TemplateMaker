AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: "{{ProjectDescription}}"
Metadata:
  AlertIdentifier: "{{AppGroupName}}"
  Tags:
    CostCenter: "{{CostCenter}}"
Parameters:
  Region:
    Description: "Specify the region"
    Type: "String"
    Default: "eu-west-1"
    AllowedValues:
      - "eu-west-1"
  AppGroup:
    Type: String
    Default: "{{AppGroupName}}"
    Description: "{{ProjectDescription}}"
    AllowedPattern: "^[a-z0-9\\\\-]{1,22}$"
  Environment:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/global/environment"
    ConstraintDescription: "Must be one of the values from the list."
    Description: "Environment in which resources are deployed."
  OracleConnectionString:
    Type: "String"
    Default: "Data Source =(DESCRIPTION=(ADDRESS=(PROTOCOL=TCPS)(HOST={HostName})(PORT=2484))(CONNECT_DATA=(SERVICE_NAME=ORCL_A)));User Id={UserName};Password = {Password}"
    Description: "Oracle connection string. Contains {} placeholders for values to be substituted"
  OracleUserName:
    Type: "String"
    Default: "{{ApiOracleUser}}"
  OraclePassword:
    Type: "String"
    NoEcho: true
  OracleHostName:
    Type: "String"
Mappings:
  Environment:
    testing:
      OracleCidr: "192.168.112.32/28"
    acceptance:
      OracleCidr: "192.168.112.32/28"
    production:
      OracleCidr: "192.168.67.16/28"
Conditions:
  NonDevelopmentResources: !Not [ !Equals [ !Ref Environment, "development" ] ]
Globals:
  Api:
    Cors:
      AllowMethods: "'GET,PUT,POST,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"
Resources:
  ApiKey:
    Type: "AWS::ApiGateway::ApiKey"
    Properties: 
      Enabled: true
      StageKeys:
        -
          RestApiId: !Ref "ServerlessApi"
          StageName: !Ref "ServerlessApiStage" # this resource is created by CloudFormation transform
  DomainName:
    Type: AWS::ApiGateway::DomainName
    Condition: NonDevelopmentResources
    Properties:
      CertificateArn: !GetAtt "CloudFrontCertificateArn.CertificateArn"
      DomainName: !Sub "${AppGroup}.${Region}.coolblue-${Environment}.eu"
  CloudFrontCertificateArn:
    Type: "Custom::GetCertificateArn"
    Condition: NonDevelopmentResources
    Properties:
      ServiceToken: !ImportValue "custom-resource-get-certificate"
      CertificateName: !Sub "${AppGroup}.${Region}.coolblue-${Environment}.eu"
  BasePathMapping:
    Type: "AWS::ApiGateway::BasePathMapping"
    Condition: NonDevelopmentResources
    Properties:
      DomainName: !Ref "DomainName"
      RestApiId: !Ref "ServerlessApi"
      Stage: !Ref "ServerlessApiStage"
###----------------------------------Functions--------------------------------------###
  {{Model.ModelName}}GetAllFunction:
    Type: AWS::Serverless::Function
    Properties:
      # Make sure handler is 128 characters or less
      Handler: "{{SolutionName}}.Lambda.GetAll::{{SolutionName}}.Lambda.GetAll.Function::FunctionHandler"
      Runtime: dotnetcore3.1
      CodeUri: ./artifacts/{{SolutionName}}.Lambda.GetAll.zip
      Description: {{ProjectDescription}}
      MemorySize: 512
      Timeout: 15
      FunctionName: !Sub "${AppGroup}-{{Model.ModelName}}-lambda-getall"
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue "oracle-vanessa-main-security-group"
          - !Ref "PrivateSecurityGroup"
        SubnetIds: !Split [",", !ImportValue "infrastructure-lambda-subnets"]
      Tags:
        Name: !Sub "${AWS::StackName}"
        AppGroup: !Sub "${AWS::StackName}"
        AppRole: "function"
        Environment: !Ref "Environment"
      Role: 
        !ImportValue "{{AppGroupName}}-iam-api-to-lambda"
      Environment:
        Variables:
          Environment: !Ref Environment
          OracleConnectionString: !Ref OracleConnectionString
          OracleUserName: !Ref OracleUserName
          OraclePassword: !Ref OraclePassword
          OracleHostName: !Ref OracleHostName
      Events:
        GetApi:
          Type: "Api"
          Properties:
            Method: "GET"
            Path: "/{{MainEndpointName}}/"
            RestApiId: !Ref "ServerlessApi"
  {{Model.ModelName}}GetAllFunctionPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref {{Model.ModelName}}GetAllFunction
      Principal: apigateway.amazonaws.com
  {{Model.ModelName}}GetFunction:
    Type: AWS::Serverless::Function
    Properties:
      # Make sure handler is 128 characters or less
      Handler: "{{SolutionName}}.Lambda.Get::{{SolutionName}}.Lambda.Get.Function::FunctionHandler"
      Runtime: dotnetcore3.1
      CodeUri: ./artifacts/{{SolutionName}}.Lambda.Get.zip
      Description: {{ProjectDescription}}
      MemorySize: 512
      Timeout: 15
      FunctionName: !Sub "${AppGroup}-{{Model.ModelName}}-lambda-get"
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue "oracle-vanessa-main-security-group"
          - !Ref "PrivateSecurityGroup"
        SubnetIds: !Split [",", !ImportValue "infrastructure-lambda-subnets"]
      Tags:
        Name: !Sub "${AWS::StackName}"
        AppGroup: !Sub "${AWS::StackName}"
        AppRole: "function"
        Environment: !Ref "Environment"
      Role: 
        !ImportValue "{{AppGroupName}}-iam-api-to-lambda"
      Environment:
        Variables:
          Environment: !Ref Environment
          OracleConnectionString: !Ref OracleConnectionString
          OracleUserName: !Ref OracleUserName
          OraclePassword: !Ref OraclePassword
          OracleHostName: !Ref OracleHostName
      Events:
        GetApi:
          Type: "Api"
          Properties:
            Method: "GET"
            Path: "/{{MainEndpointName}}/{id}"
            RestApiId: !Ref "ServerlessApi"
  {{Model.ModelName}}GetFunctionPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref {{Model.ModelName}}GetFunction
      Principal: apigateway.amazonaws.com
  #-------------------------------------------------------------#
  {{Model.ModelName}}PutFunction:
    Type: AWS::Serverless::Function
    Properties:
      # Make sure handler is 128 characters or less
      Handler: "{{SolutionName}}.Lambda.Put::{{SolutionName}}.Lambda.Put.Function::FunctionHandler"
      Runtime: dotnetcore3.1
      CodeUri: ./artifacts/{{SolutionName}}.Lambda.Put.zip
      Description: {{ProjectDescription}}
      MemorySize: 512
      Timeout: 15
      FunctionName: !Sub "${AppGroup}-{{Model.ModelName}}-lambda-put"
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue "oracle-vanessa-main-security-group"
          - !Ref "PrivateSecurityGroup"
        SubnetIds: !Split [",", !ImportValue "infrastructure-lambda-subnets"]
      Tags:
        Name: !Sub "${AWS::StackName}"
        AppGroup: !Sub "${AWS::StackName}"
        AppRole: "function"
        Environment: !Ref "Environment"
      Role: 
        !ImportValue "{{AppGroupName}}-iam-api-to-lambda"
      Environment:
        Variables:
          Environment: !Ref Environment
          OracleConnectionString: !Ref OracleConnectionString
          OracleUserName: !Ref OracleUserName
          OraclePassword: !Ref OraclePassword
          OracleHostName: !Ref OracleHostName
      Events:
        GetApi:
          Type: "Api"
          Properties:
            Method: "PUT"
            Path: "/{{MainEndpointName}}/{id}"
            RestApiId: !Ref "ServerlessApi"
  {{Model.ModelName}}PutFunctionPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref {{Model.ModelName}}PutFunction
      Principal: apigateway.amazonaws.com
  #-------------------------------------------------------------#
  {{Model.ModelName}}DeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      # Make sure handler is 128 characters or less
      Handler: "{{SolutionName}}.Lambda.Delete::{{SolutionName}}.Lambda.Delete.Function::FunctionHandler"
      Runtime: dotnetcore3.1
      CodeUri: ./artifacts/{{SolutionName}}.Lambda.Delete.zip
      Description: {{ProjectDescription}}
      MemorySize: 512
      Timeout: 15
      FunctionName: !Sub "${AppGroup}-{{Model.ModelName}}-lambda-delete"
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue "oracle-vanessa-main-security-group"
          - !Ref "PrivateSecurityGroup"
        SubnetIds: !Split [",", !ImportValue "infrastructure-lambda-subnets"]
      Tags:
        Name: !Sub "${AWS::StackName}"
        AppGroup: !Sub "${AWS::StackName}"
        AppRole: "function"
        Environment: !Ref "Environment"
      Role: 
        !ImportValue "{{AppGroupName}}-iam-api-to-lambda"
      Environment:
        Variables:
          Environment: !Ref Environment
          OracleConnectionString: !Ref OracleConnectionString
          OracleUserName: !Ref OracleUserName
          OraclePassword: !Ref OraclePassword
          OracleHostName: !Ref OracleHostName
      Events:
        GetApi:
          Type: "Api"
          Properties:
            Method: "DELETE"
            Path: "/{{MainEndpointName}}/{id}"
            RestApiId: !Ref "ServerlessApi"
  {{Model.ModelName}}DeleteFunctionPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref {{Model.ModelName}}DeleteFunction
      Principal: apigateway.amazonaws.com
  #-------------------------------------------------------------#
  {{Model.ModelName}}PostFunction:
    Type: AWS::Serverless::Function
    Properties:
      # Make sure handler is 128 characters or less
      Handler: "{{SolutionName}}.Lambda.Post::{{SolutionName}}.Lambda.Post.Function::FunctionHandler"
      Runtime: dotnetcore3.1
      CodeUri: ./artifacts/{{SolutionName}}.Lambda.Post.zip
      Description: {{ProjectDescription}}
      MemorySize: 512
      Timeout: 15
      FunctionName: !Sub "${AppGroup}-{{Model.ModelName}}-lambda-post"
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue "oracle-vanessa-main-security-group"
          - !Ref "PrivateSecurityGroup"
        SubnetIds: !Split [",", !ImportValue "infrastructure-lambda-subnets"]
      Tags:
        Name: !Sub "${AWS::StackName}"
        AppGroup: !Sub "${AWS::StackName}"
        AppRole: "function"
        Environment: !Ref "Environment"
      Role: 
        !ImportValue "{{AppGroupName}}-iam-api-to-lambda"
      Environment:
        Variables:
          Environment: !Ref Environment
          OracleConnectionString: !Ref OracleConnectionString
          OracleUserName: !Ref OracleUserName
          OraclePassword: !Ref OraclePassword
          OracleHostName: !Ref OracleHostName
      Events:
        GetApi:
          Type: "Api"
          Properties:
            Method: "POST"
            Path: "/{{MainEndpointName}}/create"
            RestApiId: !Ref "ServerlessApi"
  {{Model.ModelName}}PostFunctionPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref {{Model.ModelName}}PostFunction
      Principal: apigateway.amazonaws.com
###------------------------------------------------------------------------------------###
  PrivateSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allowed incoming/outgoing traffic to/from the internal resources"
      SecurityGroupEgress:
        - CidrIp: !FindInMap ["Environment", !Ref "Environment", "OracleCidr"]
          FromPort: 1521
          ToPort: 1521
          IpProtocol: "tcp"
        - CidrIp: "0.0.0.0/0"
          FromPort: 443
          ToPort: 443
          IpProtocol: "tcp"
      VpcId: !ImportValue "infrastructure-vpc"
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-private"
        - Key: "AppRole"
          Value: "security-group"
        - Key: "Environment"
          Value: !Ref "Environment"
        - Key: "AppGroup"
          Value: !Ref "AppGroup"            
  PrivateSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: "Security Group Ingress for pin terminal payment Lambda"
      GroupId: !Ref "PrivateSecurityGroup"
      IpProtocol: "tcp"
      FromPort: 2484
      ToPort: 2484
      SourceSecurityGroupId: !Ref "PrivateSecurityGroup"
  PrivateSecurityGroupEgress:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      Description: "Security Group Egress for pin terminal payment Lambda"
      GroupId: !Ref "PrivateSecurityGroup"
      IpProtocol: "tcp"
      FromPort: 2484
      ToPort: 2484
      DestinationSecurityGroupId: !Ref "PrivateSecurityGroup"
  ServerlessApi:  
    Type: "AWS::Serverless::Api"
    Name: "{{AppGroupName}}-api"    
    Properties:
      StageName: !Ref "Environment"
      DefinitionBody:
        swagger: "2.0"
        info:
          title: !Ref "AWS::StackName"
          version: "2018-01-11-11:40"
        basePath: !Sub "/${Environment}"
        schemes:
          - "https"
        securityDefinitions:
          api_key:
            type: 'apiKey'
            name: 'x-api-key'
            in: 'header'
        paths:
          /{{MainEndpointName}}/{ {{~Model.KeyField.Name~}} }:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: {{Model.KeyField.Name}}
                requited: true
                in: path
              responses:
                '200':
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              security:
                - api_key: []
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                uri: !Sub "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${ {{~Model.ModelName}}GetFunction.Arn}/invocations"
                httpMethod: POST
                responses:
                  "default":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,PUT,POST,DELETE,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Requested-With'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
            put:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: {{Model.KeyField.Name}}
                requited: true
                in: path
              - in: "body"
                name: "body"
                required: true
              responses:
                '200':
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              security:
                - api_key: []
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                uri: !Sub "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${ {{~Model.ModelName}}PutFunction.Arn}/invocations"
                httpMethod: POST
                responses:
                  "default":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,PUT,POST,DELETE,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Requested-With'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
            delete:
              consumes:
              - "application/json"
              produces: 
              - "application/json"
              parameters:
              - name: {{Model.KeyField.Name}}
                requited: true
                in: path
              responses:
                '200':
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              security:
                - api_key: []
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                uri: !Sub "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${ {{~Model.ModelName}}DeleteFunction.Arn}/invocations"
                passthroughBehavior: 'when_no_match'
                httpMethod: POST
                responses:
                  "default":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,PUT,POST,DELETE,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Requested-With'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
            options:
              consumes:
                - application/json
              produces:
                - application/json
              parameters:
              - name: EcochequeGroupId
                requited: true
                in: path
              - in: "body"
                name: "body"
                required: true
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,PUT,POST,DELETE,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Requested-With'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
          /{{MainEndpointName}}:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                '200':
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              security:
                - api_key: []
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                uri: !Sub "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${ {{~Model.ModelName}}GetAllFunction.Arn}/invocations"
                httpMethod: POST
                responses:
                  "default":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,PUT,POST,DELETE,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Requested-With'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - in: "body"
                name: "body"
                required: true
              responses:
                '201':
                  description: "201 created"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              security:
                - api_key: []
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                uri: !Sub "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${ {{~Model.ModelName}}PostFunction.Arn}/invocations"
                httpMethod: POST
                responses:
                  "default":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,PUT,POST,DELETE,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Requested-With'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
            options:
              consumes:
                - application/json
              produces:
                - application/json
              parameters:
              - name: EcochequeGroupId
                requited: true
                in: path
              - in: "body"
                name: "body"
                required: true
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,PUT,POST,DELETE,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Requested-With'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
  ServerlessApiRoute53RecordSet:
    Type: "AWS::Route53::RecordSet"
    Condition: NonDevelopmentResources
    Properties:
      AliasTarget:
        DNSName: !GetAtt "DomainName.DistributionDomainName"
        HostedZoneId: "Z2FDTNDATAQYW2"
      HostedZoneId: !ImportValue "dns-coolblue-public-hosted-zone-id"
      Name: !Sub "${AppGroup}.${Region}.coolblue-${Environment}.eu"
      Type: "A"
  UsagePlan:
    Type: "AWS::ApiGateway::UsagePlan"
    Properties:
      ApiStages:
        -
          ApiId: !Ref "ServerlessApi"
          Stage: !Ref "ServerlessApiStage" # this resource is created by CloudFormation transform
      UsagePlanName: !Ref "AWS::StackName"
  UsagePlanKey:
    Type: "AWS::ApiGateway::UsagePlanKey"
    Properties:
      KeyId: !Ref "ApiKey"
      KeyType: "API_KEY"
      UsagePlanId: !Ref "UsagePlan"